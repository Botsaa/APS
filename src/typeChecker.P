main_stdin :-
read(user_input,T),
typeCheck(T, R),
print(R),
nl,
exitCode(R).

typeCheck(P, ok) :- typeProg(P).
typeCheck(_, ko).

typeProg(G, CMDS, void) :- typeCommand(G, CMDS, void).
typeCommand(_, [], _).
typeCommand(G, STAT, G) :- typeStat(G, STAT, G).
typeCommand(G1, [DEC|CMDS], G2) :- typeDec(G1, DEC, G2), typeCommand(G1, CMDS, G2).
typeCommand(G1, [STAT|CMDS], G2) :- typeStat(G1, STAT, G2), typeCommand(G1, CMDS, G2).

typeStat(G, echo(E), void) :- typeExpr(G, E, int).
typeDec(G1, const(V, T, E), G2) :- typeExpr(G1, E, T), addEnv(G1, [var(V, T, E)], G2).
typeDec(G1, funDef(V, T, ARGS, E), G3) :- addEnv(G1, ARGS, G2), typeExpr(G2, E, T), addEnv(G2, V, G3).
typeDec(G1, funRecDef(V, T, ARGS, E), G4) :- addEnv(G1, ARGS, G2), addEnv(G2, V, G3) typeExpr(G3, E, T), addEnv(G3, V, G4).

typeExpr(_, true, bool).
typeExpr(_, false, bool).
typeExpr(_, val, int) :- integer(val).
typeExpr(G1, if(E1, E2, E3), G2) :- typeExpr(G, E1, bool), typeExpr(G1, E2, G2), typeExpr(G1, E3, G2).

typeExpr(G, not(E), bool) :- typeExpr(G, E, bool).
typeExpr(G, and(E1, E2), bool) :- typeExpr(G, E1, bool), typeExpr(G, E2, bool).
typeExpr(G, or(E1, E2), bool) :- typeExpr(G, E1, bool), typeExpr(G, E2, bool).

typeExpr(G, lt(E1, E2), bool) :- typeExpr(G, E1, int), typeExpr(G, E2, int).
typeExpr(G, eq(E1, E2), bool) :- typeExpr(G, E1, int), typeExpr(G, E2, int).
typeExpr(G, add(E1, E2), int) :- typeExpr(G, E1, int), typeExpr(G, E2, int).
typeExpr(G, sub(E1, E2), int) :- typeExpr(G, E1, int), typeExpr(G, E2, int).
typeExpr(G, mul(E1, E2), int) :- typeExpr(G, E1, int), typeExpr(G, E2, int).
typeExpr(G, div(E1, E2), int) :- typeExpr(G, E1, int), typeExpr(G, E2, int).

typeExpr(G1, lambda(ARGS, E), T) :- addEnv(G1, ARGS, G2), typeExpr(G2, E, T).
typeExpr(G, application(E1, E2), T) :- typeExpr(G, E1, type()), typeExprs(G, E2, T).
/*^ le type de e1 c'est un type de fonction */



addEnv(G, [], G), !.
addEnv(G1, L, G2) :- append(G1, L, G2), !.


exitCode(ok) :- halt(0).
exitCode(_) :- halt(1).
